#include <windows.h>     //Подключаю windows API

LRESULT CALLBACK WinProc(     // Эта строка является прототипом (или объявлением) оконной процедуры, которая будет использоваться для обработки сообщений, посылаемых окну
    HWND hWnd,     // Дескриптор окна, для которого предназначено сообщение.
    UINT ui,     // Идентификатор (код) сообщения, которое было послано окну.
    WPARAM wp,     // Дополнительные параметры, значение которых зависит от конкретного сообщения.
    LPARAM lp     // Дополнительные параметры, значение которых зависит от конкретного сообщения.
) {
    switch (ui)
    {
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    }
    return DefWindowProc(hWnd, ui, wp, lp);
};

int WINAPI WinMain( //Основная функция, вход в программу
    HINSTANCE hInst, // Дескриптор текущего экземпляра приложения.
    HINSTANCE, // Дескриптор текущего экземпляра приложения. Не используется, но прописывается обязательно
    LPSTR, // Указывает на строку с параметрами командной строки (без имени программы)
    int WindowShow // Определяет, как должно быть показано окно при запуске программы
) { 
    WNDCLASSEX wc{}; // Создание класса окна
    wc.cbClsExtra = 0; // Это поле определяет количество дополнительных байт, которые система выделяет сразу после структуры класса окна (то есть после данных, описывающих класс)
    wc.cbWndExtra = 0; // Аналогично, это поле определяет количество дополнительных байт, которые будут выделены для каждого экземпляра окна, созданного по данному классу
    wc.cbSize = sizeof(WNDCLASSEX); // Гарантирует, что система знает, какой объём данных передаётся.
    wc.style = CS_HREDRAW | CS_VREDRAW; // Задаёт стиль окна. Флаги CS_HREDRAW и CS_VREDRAW указывают, что окно должно полностью перерисовываться при изменении его ширины или высоты
    wc.hInstance = hInst; // Записывается дескриптор текущего экземпляра приложения, переданный через параметр hInst
    wc.hIcon = LoadIcon(NULL, IDI_APPLICATION); // Загружаю стандартную иконку приложения
    wc.hIconSm = LoadIcon(NULL, IDI_APPLICATION); // Загружаю мини иконку приложения
    wc.hCursor = LoadCursor(NULL, IDC_ARROW); // Загружаю стандартный курсор (стрелку)
    wc.hbrBackground = 0; // 
    wc.lpszClassName = L"MainClass"; // Задаю уникальное имя класса для данного типа окна
    wc.lpfnWndProc = WinProc; // Это указатель на оконную процедуру (Window Procedure), которая отвечает за обработку всех сообщений, направляемых окну.

    RegisterClassEx(&wc); // Регистрация класса окна
    // Создаем окно на основе зарегистрированного класса.
    HWND hWnd = CreateWindowEx(0, L"MainClass", L"TestWindow", WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, 1280, 768, NULL, NULL, hInst, NULL);

    // Если окно не создано, выводим сообщение об ошибке.
    if (hWnd == NULL) {
        return 1;
    }

    ShowWindow(hWnd, WindowShow);
    // Цикл обработки сообщений.Эта конструкция обеспечивает работу интерфейса.
    MSG msg{};
    while (GetMessage(&msg, NULL, 0, 0)) {     // GetMessage возвращает 0 при получении WM_QUIT
        TranslateMessage(&msg);     // Преобразование виртуальных клавиш в символы
        DispatchMessage(&msg);      // Передаем сообщение оконной процедуре
    }

    // Возвращаем код завершения, переданный через WM_QUIT.
    return static_cast<int>(msg.wParam);
}
